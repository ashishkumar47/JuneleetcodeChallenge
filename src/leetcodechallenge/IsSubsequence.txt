Given a string s and a string t, check if s is subsequence of t.
A subsequence of a string is a new string which is formed from the original string by deleting some
(can be none) of the characters without disturbing the relative positions of the remaining characters.
 (ie, "ace" is a subsequence of "abcde" while "aec" is not).

Follow up:
If there are lots of incoming S, say S1, S2, ... , Sk where k >= 1B,
 and you want to check one by one to see if T has its subsequence.
 In this scenario, how would you change your code?


Example 1:
Input: s = "abc", t = "ahbgdc"
Output: true

Example 2:
Input: s = "axc", t = "ahbgdc"
Output: false


Constraints:
0 <= s.length <= 100
0 <= t.length <= 10^4
Both strings consists only of lowercase characters.

The idea to solve the problem is by taking two pointers one for s String and other for t String and we start matching
the characters,if the character of s and t matches then we increment the s and t pointers, if it doesn't matches then we
just increment the t pointer. and at the end we check whether the s pointer has reached at the end or not.If it reaches
at the end it means that the s String's all characters are present in t String with there proper relative order maintain
and we return true in that case, if it doesn't reaches at the end then we return false.